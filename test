class N:
    def __init__(self, digit):
        self.digits = []
        if isinstance(digit, (list, tuple)):
            try:
                digit = int("".join( map( str, digit ) )) #костыли, можно и не убирать
            except:
                raise RuntimeError("Digit cannot be presented as integer > 0.")
        if isinstance(digit, int):
            try:
                self.digits = [int(i) for i in str(digit)]
                self.deg = len( str( digit ) )
            except:
                raise RuntimeError("Digit cannot be presented as integer > 0.")

    def __str__(self):
        return str(''.join(map(str, self.digits)))


class Z(N):
    def __init__(self, digit):
        digit = str(int(str(digit).replace('[', '').replace(']', '').replace(' ', '').replace(',', '')))
        try:
            self.sign = False
            if (digit[0] == '-'):
                self.sign = True
                digit = digit[1:]
            self.digits = [int(i) for i in digit]
        except:
            raise RuntimeError("Digit cannot be presented as integer.")

    def __str__(self):
        out = self.sign and '-' or ""
        out += str(''.join( map( str, self.digits )))
        return out


class Q(Z):
    def __init__(self, num, denum = 1):

        self.num = num # Числитель.
        self.denum = denum  # Знаменатель.
        if denum == 0:
            raise ZeroDivisionError("Divided by zero")
    def __str__(self):
        #res = str(self.num) + ( str(self.denum) != '1' and "\{}".format(self.denum) or "" )
        res = "{}/{}".format(self.num, self.denum)
        return res

'''
class poly:
    def __init__(self, coeflist):
        self.coef = []
        #self.deg =
        for i in range(len(coeflist)):

            self.coef.append(coeflist[i])  # Список коэффицентов, начиная со старшего.
            # self.coef = coeflist # Список коэффицентов, начиная со старшего.

    def __str__(self):
        coef, out = self.coef, ""
        if len(coef) == 0:
            out = "0"
        else:
            if len(coef) > 2:
                while (str(coef[0]) == '0'):
                    coef = coef[1:]
            if len(coef) > 2:
                out += "" if str(coef[0]) == '1' else ("-" if str(coef[0]) == '-1' else str(coef[0]))
                out += "x^" + str(len(coef) - 1)

                for i in range(1, len(coef) - 2):
                    if (str(coef[i]) != '0'):
                        out += "+" if str(coef[i]) == '1' else (
                            "-" if str(coef[i]) == '-1' else ("+" + str(coef[i]) if coef[i] > 0 else str(coef[i])))
                        out += "x^" + str(len(coef) - i - 1)

            if len(coef) > 1 and coef[-2] != 0:
                out += ("+" if str(coef[-2]) == 1 and len(coef) > 1 else ("-" if str(coef[-2]) == -1 else (
                    "+" + str(coef[-2]) if coef[-2] > 0 and len(coef) > 1 else str(coef[-2])))) + "x"
            if len(coef) > 0 and coef[-1] != 0:
                out += "+" + str(coef[-1]) if coef[-1] > 0 and len(coef) > 1 else str(coef[-1])

        return out
        '''

def com_nn_d(n1, n2):
    if n1.deg > n2.deg:
        return 2
    elif n1.deg < n2.deg:
        return 1
    else:
        for i in range(n1.deg):
            if n1.digits[i] != n2.digits[i]:
                if n1.digits[i] > n2.digits[i]:
                    return 2
                else:
                    return 1
        return 0
def nzer_n_b( n ):
    if n.deg == 1 and n.digits[0]==0:
        return False
    else:
        return True
def add_1n_n( n ): #проверить
    k = n.deg
    while k and n.digits[k] == 9:
        n.digits[k] = 0
        k -= 1
    if n.digits[k] == 9:
        n.digits[k] = 0
        n.digits.insert(0,1)
        n.deg += 1
    return n
def add_nn_n( n1, n2 ):
    q = com_nn_d(n1, n2)
    if q == 2:
        d = n2.deg
        lst = n1.digits
        dop = n2.digits
    else:
        d = n1.deg
        lst = n2.digits
        dop = n1.digits
    for i in range(1,d+1):
        lst[-i] += dop[-i]
    n = N( lst )
    return n
def sub_nn_n( n1, n2 ):
    if com_nn_d(n1,n2) == 1: #п.у. можно и обойтись
        n1,n2 = n2,n1        #или он поменяет местами и исходные
    lst = []
    lst += n1.digits
    for i in range(1,n2.deg+1):
        lst[-i] -= n2.digits[-i]
        if lst[-i] < 0:
            lst[-i-1] -= 1
            lst[-i]+=10
    n = N(lst)
    return n
def mul_nd_n( n, d ):
    lst = []
    lst += n.digits
    t = 0
    for i in range(1,n.deg+1):
        lst[-i] *= d
        lst[-i] += t
        t = lst[-i] // 10
        lst[-i] %= 10
    if t:
        lst.insert(0,t)
    return N(lst)
def mul_nk_n( n, k ):
    return N(n.digits+[0]*k)
def mul_nn_n( n1, n2 ):
    lst = []
    for i in range(n2.deg):
        lst.append( mul_nk_n( mul_nd_n( n1, n2.digits[-i-1] ), i ) )
    n = N( 0 )
    for i in lst:
        n = add_nn_n( n, i )
    return n
def sub_ndn_n( n1, d, n2 ):
    n = sub_nn_n( n1, mul_nd_n( n2, d ) )
    return n
def div_nn_dk( n1, n2 ): #магия
    k = 0
    while com_nn_d( n1, mul_nk_n( n2, k ) ) == 2:
        k+=1
    k-=1
    res = 9
    while com_nn_d( n1, mul_nd_n( mul_nk_n(n2, k), res ) ) == 1:
        res -= 1
    return res * 10**k
def div_nn_n( n1, n2 ):
    lst = []
    lst += n1.digits
    tmp = N(lst)
    n = N(0)
    while com_nn_d( tmp, n2 ) == 2:
        n = add_nn_n( n, N(div_nn_dk( tmp, n2 ) ) )
        tmp = sub_nn_n( n1, mul_nn_n( n, n2 ) )
    return n
def mod_nn_n( n1, n2 ):
    n = div_nn_n( n1, n2 )
    n = mul_nn_n( n, n2 )
    n = sub_nn_n( n1, n )
    return n
def gcf_nn_n( n1, n2 ):
    tmp1 = n1
    tmp2 = n2
    while nzer_n_b( tmp2 ):
        tmp1 = mod_nn_n( tmp1, tmp2 )
        tmp1, tmp2 = tmp2, tmp1
    return tmp1
def lcm_nn_n( n1, n2 ):
    res = mul_nn_n( n1, n2 )
    res = div_nn_n( res, gcf_nn_n( n1, n2 ) )
    return res





n1 = N( 123 )
print( n1 )
z1 = Z( -1 )
print( z1 )
q1 = Q( z1,n1 )
print(q1)

n2 = mul_nk_n(n1, 3)
print(n2)
print(n1)
print("---")
z2 = Z( '0075' )
print(z2)